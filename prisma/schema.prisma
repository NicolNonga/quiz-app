// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id                           String                         @id @default(uuid())
  user_name                    String                         @unique
  password                     String
  typeUser                     Role                           @default(User)
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
  quiz_attempt                 quiz_attempt[]
  user_photo                   user_photo[]
  quiz_section_users           quiz_section_users[]
  quiz_section_user_avalition quiz_section_user_avalition[]
}

model quiz_section_users {
  id              String       @id @default(uuid())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now())
  user            user         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  quiz_section    quiz_section @relation(fields: [quiz_section_id], references: [id], onDelete: Cascade)
  is_completed    Boolean      @default(false)
  quiz_section_id String
  user_id         String
}

model quiz_attempt {
  id              String       @id @default(uuid())
  user            user         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id         String
  quiz_option     quiz_option  @relation(fields: [quez_option_id], references: [id], onDelete: Cascade)
  quez_option_id  String
  quiz_section    quiz_section @relation(fields: [quiz_section_id], references: [id], onDelete: Cascade)
  quiz_section_id String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model quiz {
  id        String   @id @default(uuid())
  name      String   @unique
  topic     String   @default("NULL")
  createdAt DateTime @default(now())

  updatedAt    DateTime       @updatedAt
  quiz_section quiz_section[]
}

model quiz_section {
  id                           String                         @id @default(uuid())
  name                         String                         @unique
  category_id                  String
  category                     category                       @relation(fields: [category_id], references: [id], onDelete: Cascade)
  quiz_id                      String
  quiz                         quiz                           @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  quiz_attempt                 quiz_attempt[]
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
  section_question             section_question[]
  quiz_section_users           quiz_section_users[]
  quiz_section_user_avalition quiz_section_user_avalition[]
}

model category {
  id           String         @id @default(uuid())
  name         String         @unique
  quiz_section quiz_section[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model user_photo {
  id                 String          @id @default(uuid())
  quiz_attchment     quiz_attachment @relation(fields: [quiz_attachment_id], references: [id], onDelete: Cascade)
  quiz_attachment_id String
  user               user            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id            String
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
}

model quiz_question {
  id               String             @id @default(uuid())
  question_text    String
  section_question section_question[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  quiz_option      quiz_option[]
  value            Int                @default(0)
}

model section_question {
  id              String       @id @default(uuid())
  quiz_section    quiz_section @relation(fields: [quiz_section_id], references: [id], onDelete: Cascade)
  quiz_section_id String

  quiz_question quiz_question @relation(fields: [question_id], references: [id], onDelete: Cascade)
  question_id   String
}

model quiz_option {
  id                     String                   @id @default(uuid())
  option_text            String
  is_img                 Boolean
  is_correct             Boolean
  quiz_question          quiz_question            @relation(fields: [quiz_question_id], references: [id], onDelete: Cascade)
  quiz_question_id       String
  quiz_attempt           quiz_attempt[]
  quiz_attachment_option quiz_attachment_option[]

  //! add created_at and updated_at
}

model quiz_attachment_option {
  id                 String          @id @default(uuid())
  quiz_option_id     String
  quiz_attachment_id String
  quiz_option        quiz_option     @relation(fields: [quiz_option_id], references: [id], onDelete: Cascade)
  quiz_attacment     quiz_attachment @relation(fields: [quiz_attachment_id], references: [id], onDelete: Cascade)
}

model quiz_attachment {
  id                     String                   @id @default(uuid())
  file_path              String
  file_name              String
  user_photo             user_photo[]
  quiz_attachment_option quiz_attachment_option[]
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
}

model quiz_section_user_avalition {
  id              String         @id @default(uuid())
  user            user           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id         String
  quiz_section_id String
  quiz_section    quiz_section[]
  punctuation      Float
  total_pergunta_acertas Int  @default(0)
  total_perguntas_erradas Int @default(0)

  
}

enum Role {
  User
  ADMIN
}
